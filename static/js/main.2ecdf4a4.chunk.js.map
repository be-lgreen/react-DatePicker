{"version":3,"sources":["components/DayNamesContainer.js","components/Day.js","components/DaysContainer.js","components/Popup.js","components/DatePicker.js","App.js","serviceWorker.js","index.js"],"names":["dayNames","DayNamesContiner","dayNamesMarkup","map","dayName","react_default","a","createElement","className","Component","Day","_ref","day","color","handleDayClicks","selected","selectedMid","selectedDateListLen","inputText","disable","onClick","bind","disabled","getDate","DaysContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getDayMarkup","assertThisInitialized","_this2","selectedDate","daysOfMonthMarkup","thisYear","thisMonth","currentDate","Date","monthArray","tempWeekArray","i","getDay","push","getMonth","length","getDaysOfMonth","getFullYear","week","_this$props","selectedDateList","inputTextArray","renderDate","dateSelected","isDateSelected","dateSelectedMid","isDateSelectedMid","String","src_components_Day","Popup","state","handleTextChange","e","setState","target","value","handleTextSubmit","handleButtonText","handlePopupCloseClick","preventDefault","placeholder","onChange","DatePicker","showPopup","handleDayDoubleClick","newDay","console","log","_this$state","_assertThisInitialize","handleDayClick","clickCount","singleClickTimer","setTimeout","clearTimeout","_this$state2","info","index","nextProps","nextState","_this$state3","components_DayNamesContainer","src_components_DaysContainer","src_components_Popup","_this$state4","concat","filter","date","App","src_components_DatePicker","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ecdf4a4.chunk.js","sourcesContent":["import React ,{Component} from \"react\";\r\nimport \"./DayNamesContainer.css\";\r\n\r\nconst dayNames = [\r\n    \"일\",\r\n    \"월\",\r\n    \"화\",\r\n    \"수\",\r\n    \"목\",\r\n    \"금\",\r\n    \"토\"\r\n];\r\n\r\nclass DayNamesContiner extends Component{\r\n    render(){\r\n        const dayNamesMarkup = dayNames.map(dayName => <div className=\"DayName\">{dayName}</div>)\r\n        //const dayNamesMarkup = dayNames.map(dayName => <DayName dayName={dayName}></DayName>)\r\n        return(    \r\n            <div className=\"dayNamesMarkup\">{dayNamesMarkup}</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DayNamesContiner;","import React, {Component} from \"react\";\r\nimport \"./Day.css\"\r\n\r\nconst Day = ({day, color, handleDayClicks, selected, selectedMid, selectedDateListLen, inputText, disable}) => {\r\n    //buttons which disalbed=\"true\"\r\n    if(day === null){\r\n        return <div className=\"EmptyStateDay\"></div>\r\n    }\r\n\r\n    let className = \"\"\r\n    className = className + (selected >= 0 ? \"Selected\" : color);\r\n    if(selectedDateListLen >= 3 && className === \"Selected\"){\r\n        className = \"Multi\" + className;\r\n    }\r\n    if(selectedMid){\r\n        className = \"BetweenSelected\";\r\n    }\r\n    if(color === \"Gray\")\r\n        className = \"Gray\"\r\n    else if(color === \"Green\")\r\n        className = \"Green\"\r\n        \r\n    return(\r\n            <button className={className} onClick={handleDayClicks.bind(this,day)} disabled={disable}>\r\n                <div className=\"ButtonLayout\">\r\n                    <text className=\"ButtonDateText\">{day.getDate()}</text>\r\n                    <text className=\"ButtonText\">{inputText}</text>\r\n                </div>\r\n           </button>   \r\n    );\r\n};\r\n\r\nexport default Day;","import React, {Component} from \"react\";\r\nimport \"./DaysContainer.css\"\r\nimport Day from \"./Day\"\r\nimport \"./Day.css\"\r\nimport { strict } from \"assert\";\r\n\r\nfunction getDaysOfMonth(thisYear, thisMonth){\r\n    let currentDate = new Date(thisYear, thisMonth);\r\n    let monthArray = [[]];\r\n    let tempWeekArray = [];\r\n\r\n    for(let i=0; i<currentDate.getDay(); i++){\r\n        tempWeekArray.push(null);\r\n    }\r\n\r\n    while(currentDate.getMonth() === thisMonth){\r\n        if(tempWeekArray.length === 7){\r\n            monthArray.push(tempWeekArray);\r\n            tempWeekArray = [];\r\n        }\r\n        tempWeekArray.push(currentDate);\r\n        currentDate = new Date(thisYear, thisMonth, currentDate.getDate()+1);\r\n    }\r\n\r\n    while(tempWeekArray.length <= 6){\r\n        tempWeekArray.push(null);\r\n    }\r\n\r\n    monthArray.push(tempWeekArray);\r\n    \r\n    return monthArray;\r\n}\r\n\r\nfunction isDateSelected(renderDate, selectedDateList){\r\n    for(let i=0; i<selectedDateList.length; i++){\r\n        if(renderDate === selectedDateList[i].getDate())\r\n            return i;\r\n    }\r\n    return -1;\r\n}\r\n\r\nfunction isDateSelectedMid(renderDate, selectedDateList){\r\n    if(renderDate > selectedDateList[0].getDate() && renderDate < selectedDateList[1].getDate()){\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nclass DaysContainer extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.getDayMarkup = this.getDayMarkup.bind(this);\r\n    }\r\n\r\n    render(){\r\n        const{ selectedDate } = this.props;\r\n\r\n        const thisYear = selectedDate.getFullYear();\r\n        const thisMonth = selectedDate.getMonth();\r\n\r\n        const monthArray = getDaysOfMonth(thisYear, thisMonth);\r\n        const daysOfMonthMarkup = monthArray.map(week => <div className=\"week\">{week.map(this.getDayMarkup)}</div>);           \r\n        return(\r\n            <div>{daysOfMonthMarkup}</div>\r\n        );\r\n    }\r\n\r\n    getDayMarkup(day){\r\n        const { selectedDateList, handleDayClicks, inputTextArray} = this.props;\r\n        \r\n        \r\n        if(day !== null){\r\n            const currentDate = new Date().getDate();\r\n            const renderDate = day.getDate();\r\n            const dateSelected = isDateSelected(renderDate, selectedDateList);\r\n            let dateSelectedMid = false;\r\n    \r\n            const selectedDateListLen = selectedDateList.length;\r\n            let inputText = inputTextArray[day.getDate()];\r\n            if(dateSelected === -1){\r\n                if(selectedDateList.length === 2){\r\n                    dateSelectedMid = isDateSelectedMid(renderDate, selectedDateList);\r\n                }\r\n            }else{\r\n                inputText = \"선택\" + String(dateSelected+1);\r\n            }\r\n            \r\n            let color = \"\";\r\n            let disable = \"\";\r\n            if(renderDate < currentDate){\r\n                color = \"Gray\";\r\n                disable = true;\r\n            }else if(renderDate === currentDate){\r\n                color = \"Green\";\r\n                disable = true;\r\n            }else{\r\n                if(day.getDay() === 0){\r\n                    color = \"Red\"\r\n                    disable = false;\r\n                }\r\n                else if(day.getDay() === 6){\r\n                    color = \"Blue\";\r\n                    disable = false;\r\n                }else {\r\n                    color = \"Black\"\r\n                    disable = false;\r\n                }   \r\n            }\r\n\r\n            return(<div className=\"Day\">\r\n            <Day \r\n            day={day} \r\n            color={color} \r\n            selected={dateSelected} \r\n            selectedMid={dateSelectedMid}\r\n            selectedDateListLen={selectedDateListLen}\r\n            handleDayClicks={handleDayClicks}\r\n            inputText={inputText}\r\n            disable={disable}\r\n            /></div>)\r\n\r\n        }else{\r\n            return(<div className=\"Day\"><Day day={null}/></div>)\r\n        }\r\n\r\n    }  \r\n}\r\n\r\nexport default DaysContainer;","import React, {Component} from 'react';\r\nimport \"./Popup.css\";\r\n\r\nclass Popup extends Component{\r\n\r\n    state = {\r\n        inputText: ''\r\n    }\r\n    handleTextChange = (e) => {\r\n        this.setState({\r\n            inputText: e.target.value\r\n        })\r\n    }\r\n\r\n    handleTextSubmit = (e) => {\r\n        const{ handleButtonText, handlePopupCloseClick } = this.props;\r\n        const{ inputText} = this.state;\r\n\r\n        e.preventDefault(); \r\n        handleButtonText(inputText);\r\n        this.setState({\r\n            inputText : ''\r\n        })\r\n        handlePopupCloseClick();\r\n    }\r\n\r\n    render(){\r\n        const{handlePopupCloseClick} = this.props;\r\n        const{inputText} = this.state;\r\n        const{handleTextChange, handleTextSubmit} = this;\r\n        \r\n        return(\r\n            <div className='Popup'>\r\n                <from className=\"PopupInner\">\r\n                    <input\r\n                        placeholder=\"텍스트를 입력 하세요\"\r\n                        value = {inputText}\r\n                        onChange={handleTextChange}\r\n                    />\r\n                    <div className=\"PopupButtons\">\r\n                        <button className=\"SubmitButton\" onClick={handleTextSubmit}>등록</button>\r\n                        <button className=\"CancelButton\" onClick={handlePopupCloseClick}>취소</button>\r\n                    </div>\r\n                </from>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Popup;","import React ,{Component} from \"react\";\r\nimport \"./DatePicker.css\";\r\nimport DayNamesContainer from \"./DayNamesContainer\";\r\nimport DaysContainer from \"./DaysContainer\";\r\nimport Popup from './Popup';\r\n\r\nclass DatePicker extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.handleDayClick = this.handleDayClick.bind(this);\r\n        this.clickCount = 0;\r\n        this.singleClickTimer = '';\r\n    }\r\n    state = {\r\n        selectedDate: new Date(),\r\n        selectedDateList: [],\r\n\r\n        showPopup : false,\r\n        inputTextArray : ['', '', '', '', '', '', '', '', '', '',\r\n        '', '', '', '', '', '', '', '', '', '',\r\n        '', '', '', '', '', '', '', '', '', '',\r\n        '', '', '', '', '']\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        if((this.state.inputTextArray !== nextState.inputTextArray) ||\r\n         (this.state.selectedDateList !== nextState.selectedDateList) ||\r\n         (this.state.showPopup !== nextState.showPopup))\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    render(){\r\n        const{ selectedDate, selectedDateList, showPopup, inputTextArray} = this.state;\r\n        const{\r\n            handleDayClicks,\r\n\r\n            handlePopupCloseClick,\r\n            handleButtonText,         \r\n        } = this;\r\n \r\n        return(    \r\n            <div className=\"DatePickerTemplate\">\r\n                <div className=\"DatePickerTitle\">{selectedDate.getFullYear() + \".\" + (selectedDate.getMonth()+1) + \".\"}</div>\r\n                <div className=\"DatePickerDayNamesContainer\">\r\n                    <DayNamesContainer/>\r\n                </div>\r\n                <div className=\"DatePickerDaysContainer\">\r\n                    <DaysContainer \r\n                    selectedDate={selectedDate}\r\n                    selectedDateList={selectedDateList}\r\n                    handleDayClicks={handleDayClicks}\r\n                    inputTextArray={inputTextArray}\r\n                    />\r\n                </div>\r\n                {showPopup ? <Popup handleButtonText={handleButtonText} handlePopupCloseClick={handlePopupCloseClick}/> : null}\r\n            </div>  \r\n        );\r\n    }\r\n\r\n    handleDayClick(newDay){\r\n        const { selectedDate, selectedDateList} = this.state;\r\n        this.setState({\r\n            selectedDate: new Date(\r\n                selectedDate.getFullYear(),\r\n                selectedDate.getMonth(),\r\n                newDay.getDate()\r\n            )\r\n        })\r\n        \r\n        if((selectedDateList.length === 0) || (newDay.getDate() > selectedDateList[selectedDateList.length-1].getDate())){\r\n            this.setState({\r\n                selectedDateList: selectedDateList.concat(\r\n                    new Date(\r\n                        selectedDate.getFullYear(),\r\n                        selectedDate.getMonth(),\r\n                        newDay.getDate()\r\n                    )\r\n                )\r\n            })\r\n        }else{\r\n            for(let i=0; i<selectedDateList.length; i++){\r\n                //if(newDay.getDate() === selectedDateList[i].getDate()){\r\n                    this.setState({\r\n                        selectedDateList: selectedDateList.filter(date => date.getDate() !== newDay.getDate())\r\n                    })\r\n                //}\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    handleDayDoubleClick = (newDay) => {\r\n        console.log(\"handleDaydoubleClick: \", newDay);\r\n\r\n        const{ showPopup, selectedDate} = this.state;\r\n        this.setState({\r\n            selectedDate: new Date(\r\n                selectedDate.getFullYear(),\r\n                selectedDate.getMonth(),\r\n                newDay.getDate()\r\n            ),\r\n            showPopup: !showPopup\r\n        })\r\n    }\r\n\r\n    handleDayClicks = (newDay) => {\r\n        const{handleDayClick, handleDayDoubleClick} = this;\r\n\r\n        this.clickCount++;\r\n        if(this.clickCount === 1){\r\n            this.singleClickTimer = setTimeout(function(){\r\n                this.clickCount = 0;\r\n                handleDayClick(newDay);\r\n            }.bind(this), 300);\r\n        }else if(this.clickCount === 2){\r\n            clearTimeout(this.singleClickTimer);\r\n            this.clickCount = 0;\r\n            handleDayDoubleClick(newDay);\r\n        }\r\n    }\r\n\r\n    handlePopupCloseClick = () => {\r\n        const{showPopup} = this.state;\r\n\r\n        this.setState({\r\n            showPopup : !showPopup\r\n        })\r\n    }\r\n\r\n    handleButtonText = (inputText) => {\r\n        const{inputTextArray, selectedDate} = this.state;\r\n        this.setState({\r\n            inputTextArray : inputTextArray.map(\r\n                (info, index) => {\r\n                    if(index === selectedDate.getDate()){\r\n                        return inputText;\r\n                    }else{\r\n                        return info;\r\n                    }\r\n                }\r\n            )\r\n        })\r\n    }\r\n}\r\n\r\nexport default DatePicker;","import React, { Component } from 'react';\r\nimport \"./App.css\"\r\nimport DatePicker from './components/DatePicker';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <DatePicker/>  \r\n      </div>    \r\n    );\r\n  } \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}